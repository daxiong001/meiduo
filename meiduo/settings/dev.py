"""
Django settings for meiduo project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-@qrd9$7)^i2nm5%gu59u!y0o$28v8ml996grnjho8-bgb@me5t'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许那些域名访问django
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'rest_framework',
    'corsheaders',  # cors跨域配置
    'ckeditor',  # 富文本编辑器
    'ckeditor_uploader',  # 富文本编辑器上传图片模块
    # 'django_crontab',  # 定时任务(不支持window，要手动添加执行，放弃)
    'django_apscheduler',  # 定时任务
    "django_filters",  # 过滤器

    'meiduo.apps.users',  # 用户服务
    'meiduo.apps.verifications',  # 验证码服务
    'meiduo.apps.oauth',  # 第三方登陆
    'meiduo.apps.areas',  # 区域
    "meiduo.apps.goods",  # 商品
    "meiduo.apps.contents",  # 内容
    "meiduo.apps.apschedulers",  # 定时任务
    "meiduo.apps.carts",  # 购物车
]

# 修改django认证系统的用户模型类
AUTH_USER_MODEL = "users.User"

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 跨域中间件
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'meiduo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates"), ]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'meiduo.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'meiduo',
        'USER': 'root',
        'PASSWORD': 'daixiongkun123',
        'HOST': '127.0.0.1',
        'PORT': 3306,
        'OPTIONS': {'isolation_level': None}
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 设置redis缓存
CACHES = {
    # 默认缓存,缓存省市区
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        # 项目上线时,需要调整这里的路径
        "LOCATION": "redis://127.0.0.1:6379/0",

        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供给xadmin或者admin的session存储
    "session": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 提供存储短信验证码
    "verify_codes": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    # 用户商品浏览记录
    "browser_history": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# 视图redis缓存配置
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存库
    'DEFAULT_USE_CACHE': 'default',
    # 缓存时间
    'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 60,
}

# 设置xadmin用户登录时,登录信息session保存到redis
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# 日志配置
LOGGING = {
    'version': 1,  # 使用的python内置的logging模块，那么python可能会对它进行升级，所以需要写一个版本号，目前就是1版本
    'disable_existing_loggers': False,  # 是否去掉目前项目中其他地方中以及使用的日志功能，但是将来我们可能会引入第三方的模块，里面可能内置了日志功能，所以尽量不要关闭。
    'formatters': {  # 日志记录格式
        'verbose': {  # levelname等级，asctime记录时间，module表示日志发生的文件名称，lineno行号，message错误信息
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },
    'filters': {  # 过滤器：可以对日志进行输出时的过滤用的
        'require_debug_true': {  # 在debug=True下产生的一些日志信息，要不要记录日志，需要的话就在handlers中加上这个过滤器，不需要就不加
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {  # 日志处理方式，日志实例,向哪里输出
        'console': {  # 在控制台输出时的实例
            'level': 'INFO',  # 日志等级；debug是最低等级，那么只要比它高等级的信息都会被记录
            'filters': ['require_debug_true'],  # 在debug=True下才会打印在控制台
            'class': 'logging.StreamHandler',  # 使用的python的logging模块中的StreamHandler来进行输出
            'formatter': 'simple'
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            # 日志位置,日志文件名,日志保存目录必须手动创建
            'filename': os.path.join(os.path.dirname(BASE_DIR), "logs/meiduo.log"),  # 文件应该有读写权限。
            # 日志文件的最大值,这里我们设置300M
            'maxBytes': 300 * 1024 * 1024,  # B
            # 日志文件的数量,设置最大日志数量为10
            'backupCount': 10,
            # 日志格式:详细格式
            'formatter': 'verbose',
            'encoding': 'utf-8',  # 设置默认编码，否则打印出来汉字乱码
        },
    },
    # 日志对象
    'loggers': {
        'django': {  # 和django结合起来使用，将django中之前的日志输出内容的时候，按照我们的日志配置进行输出，
            'handlers': ['console', 'file'],  # 将来项目上线，把console去掉
            'propagate': True,
            'level': "INFO"
            # 冒泡：是否将日志信息记录冒泡给其他的日志处理系统，工作中都是True，不然django这个日志系统捕获到日志信息之后，其他模块中可能也有日志记录功能的模块，就获取不到这个日志信息了
        },
    }
}

# drf配置项
REST_FRAMEWORK = {
    # 异常处理
    'EXCEPTION_HANDLER': 'meiduo.utils.exceptions.exception_handler',
    # 接口文档配置
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    # 认证
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 分页默认数量
    # 'PAGE_SIZE': 10,

}

# CORS 追加⽩名单
CORS_ORIGIN_WHITELIST = ('http://127.0.0.1:8080', 'http://localhost:8080',)
CORS_ALLOW_CREDENTIALS = True  # 跨域时允许携带cookie

#   jwt配置项
JWT_AUTH = {
    #   jwt有效期
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=3),
    #   重写登陆返回信息配置
    'JWT_RESPONSE_PAYLOAD_HANDLER': 'meiduo.apps.users.utils.jwt_response_payload_handler',
}

# 修改django用户认证后端类配置
AUTHENTICATION_BACKENDS = ["meiduo.apps.users.utils.UserNameMobileAuthBackend"]

# 微博登陆配置项
APP_KEY = '953929317'
APP_SECRET = '6a5e55dfbb2e87d56b741c22a639866d'
REDIRECT_URI = 'http%3A%2F%2F127.0.0.1%3A8080%2Foauth%5fcallback.html'

# 邮箱配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.qq.com'
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '514590399@qq.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'ogntntvagextcbee'
# 收件⼈看到的发件⼈
EMAIL_FROM = 'python<514590399@qq.com>'
EMAIL_USE_TLS = True

# django⽂件存储
DEFAULT_FILE_STORAGE = 'meiduo.utils.fastdfs.fdst_storage.FastDFSStorage'
# FastDFS
FDFS_BASE_URL = 'http://192.168.31.110:8888/'
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')

# 富⽂本编辑器ckeditor配置
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',  # ⼯具条功能
        'height': 300,  # 编辑器⾼度
        # 'width': 300, # 编辑器宽
    },
}
CKEDITOR_UPLOAD_PATH = ''  # 上传图⽚保存路径，使⽤了FastDFS，所以此处设为'

# 配置图像上传
MEDIA_URL = '/media/'  # 上传图像的路径
MEDIA_ROOT = os.path.join(BASE_DIR, '/media/')  # 上传图像的根路径

# 首页静态html文件配置路径
GENERATED_STATIC_HTML_FILES_DIR = os.path.join(os.path.dirname(BASE_DIR), 'fronted')

# 定时任务
# CRONJOBS = [
#     # 每1分钟执⾏⼀次⽣成主⻚静态⽂件
#     ('*/1 * * * *', 'meiduo.apps.contents.crons.generate_static_index_html',
#      '>> /Users/daixiongkun/PycharmProjects/djangostudy/meiduo/logs/crontab.log')]
#
# CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
#
# print(TEMPLATES[0]["DIRS"])
